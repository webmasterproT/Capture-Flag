import unittest
from exploit_development import ExploitDevelopment
from data.exploit_payloads import EXPLOIT_PAYLOADS
from utils.helpers import log_activity

class TestExploitDevelopment(unittest.TestCase):
    def setUp(self):
        self.exploit_dev = ExploitDevelopment()

    def test_exploit_creation(self):
        for payload in EXPLOIT_PAYLOADS:
            with self.subTest(payload=payload):
                result = self.exploit_dev.create_exploit(payload)
                self.assertTrue(result['success'], f"Exploit creation failed for payload: {payload}")

    def test_exploit_execution(self):
        for payload in EXPLOIT_PAYLOADS:
            with self.subTest(payload=payload):
                exploit = self.exploit_dev.create_exploit(payload)
                if exploit['success']:
                    execution_result = self.exploit_dev.execute_exploit(exploit['code'])
                    self.assertTrue(execution_result['success'], f"Exploit execution failed for payload: {payload}")
                else:
                    self.skipTest(f"Skipping execution test for failed exploit creation: {payload}")

    def test_remote_code_execution(self):
        target_info = {'ip': '192.168.1.100', 'port': 8080}
        for payload in EXPLOIT_PAYLOADS:
            with self.subTest(payload=payload):
                rce_result = self.exploit_dev.remote_code_execution(target_info, payload)
                self.assertTrue(rce_result['success'], f"Remote code execution failed for payload: {payload}")

    def tearDown(self):
        log_activity("Exploit tests completed.")

if __name__ == '__main__':
    unittest.main()